[
  {
    "id": "04e2c772a74b91b70a12a696ff6b3c636c241438e2a560543ff31fbf9c78d111",
    "impact": "High",
    "confidence": "High",
    "check": "encode-packed-collision",
    "description": "BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238) calls abi.encodePacked() with multiple dynamic arguments:\n\t- key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload)) (src/boba/BobaHCHelper.sol#221)\n",
    "type": "function",
    "name": "GetLegacyResponse",
    "start": 8221,
    "length": 1247,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "04e2c772a74b91b70a12a696ff6b3c636c241438e2a560543ff31fbf9c78d111",
    "impact": "High",
    "confidence": "High",
    "check": "encode-packed-collision",
    "description": "BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238) calls abi.encodePacked() with multiple dynamic arguments:\n\t- key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload)) (src/boba/BobaHCHelper.sol#221)\n",
    "type": "node",
    "name": "key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload))",
    "start": 8640,
    "length": 95,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "6eeb5d15fcace3fb1c4947ff4b3961705407d1b06df28330ce3c2db3440a5fae",
    "impact": "High",
    "confidence": "High",
    "check": "encode-packed-collision",
    "description": "BobaHCHelper.CallOffchain(string,bytes) (src/boba/BobaHCHelper.sol#51-63) calls abi.encodePacked() with multiple dynamic arguments:\n\t- key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload)) (src/boba/BobaHCHelper.sol#61)\n",
    "type": "function",
    "name": "CallOffchain",
    "start": 1756,
    "length": 643,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "6eeb5d15fcace3fb1c4947ff4b3961705407d1b06df28330ce3c2db3440a5fae",
    "impact": "High",
    "confidence": "High",
    "check": "encode-packed-collision",
    "description": "BobaHCHelper.CallOffchain(string,bytes) (src/boba/BobaHCHelper.sol#51-63) calls abi.encodePacked() with multiple dynamic arguments:\n\t- key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload)) (src/boba/BobaHCHelper.sol#61)\n",
    "type": "node",
    "name": "key = keccak256(bytes)(abi.encodePacked(method,msg.sender,abi.encodePacked(_url),_payload))",
    "start": 2236,
    "length": 95,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "0b6d0d6699a3fa3c78250e527327e43538895feecaa6cfd8a1793dfcc1d20c72",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setOwner(address) (src/legacy/L1ChugSplashProxy.sol#138-140) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "setOwner",
    "start": 6890,
    "length": 97,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "0b6d0d6699a3fa3c78250e527327e43538895feecaa6cfd8a1793dfcc1d20c72",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setOwner(address) (src/legacy/L1ChugSplashProxy.sol#138-140) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "0b6d0d6699a3fa3c78250e527327e43538895feecaa6cfd8a1793dfcc1d20c72",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setOwner(address) (src/legacy/L1ChugSplashProxy.sol#138-140) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "0d4915766a9a2117c655d6bc36e42594e95bbba8293384ec5b2c4904ff7a131f",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.target() (src/L1/DelayedVetoable.sol#108-110) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "target",
    "start": 4421,
    "length": 99,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "0d4915766a9a2117c655d6bc36e42594e95bbba8293384ec5b2c4904ff7a131f",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.target() (src/L1/DelayedVetoable.sol#108-110) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "0d4915766a9a2117c655d6bc36e42594e95bbba8293384ec5b2c4904ff7a131f",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.target() (src/L1/DelayedVetoable.sol#108-110) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "11c5e51d3a0080a2b8f208ae6ec1a4c5617c6df83441ac96c67f322294f73f2b",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getImplementation() (src/legacy/L1ChugSplashProxy.sol#152-154) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "getImplementation",
    "start": 7519,
    "length": 120,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "11c5e51d3a0080a2b8f208ae6ec1a4c5617c6df83441ac96c67f322294f73f2b",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getImplementation() (src/legacy/L1ChugSplashProxy.sol#152-154) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "11c5e51d3a0080a2b8f208ae6ec1a4c5617c6df83441ac96c67f322294f73f2b",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getImplementation() (src/legacy/L1ChugSplashProxy.sol#152-154) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "1e96b3f3be5c5b827284291533d15f8b70c3f8bc774e863359baa95195e8a79c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.implementation() (src/universal/Proxy.sol#97-99) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "implementation",
    "start": 3967,
    "length": 123,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "1e96b3f3be5c5b827284291533d15f8b70c3f8bc774e863359baa95195e8a79c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.implementation() (src/universal/Proxy.sol#97-99) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "1e96b3f3be5c5b827284291533d15f8b70c3f8bc774e863359baa95195e8a79c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.implementation() (src/universal/Proxy.sol#97-99) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "2792614492719714cdcff9f7f8e1c602931befa4b0b2d9e0845a2fbf3964f949",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeToAndCall(address,bytes) (src/universal/Proxy.sol#67-81) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "upgradeToAndCall",
    "start": 2959,
    "length": 458,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "2792614492719714cdcff9f7f8e1c602931befa4b0b2d9e0845a2fbf3964f949",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeToAndCall(address,bytes) (src/universal/Proxy.sol#67-81) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "2792614492719714cdcff9f7f8e1c602931befa4b0b2d9e0845a2fbf3964f949",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeToAndCall(address,bytes) (src/universal/Proxy.sol#67-81) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "35ba264224a7ea48dc7cd248e60c07e4aae32401690ae90b217f017e3a1b8112",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.vetoer() (src/L1/DelayedVetoable.sol#102-104) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "vetoer",
    "start": 4223,
    "length": 107,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "35ba264224a7ea48dc7cd248e60c07e4aae32401690ae90b217f017e3a1b8112",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.vetoer() (src/L1/DelayedVetoable.sol#102-104) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "35ba264224a7ea48dc7cd248e60c07e4aae32401690ae90b217f017e3a1b8112",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.vetoer() (src/L1/DelayedVetoable.sol#102-104) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "38dac452acbdd7762ba9aa67e268c249835dad01e219ff2f50d93e4533aa7c52",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) calls DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "38dac452acbdd7762ba9aa67e268c249835dad01e219ff2f50d93e4533aa7c52",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) calls DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "_handleCall",
    "start": 5365,
    "length": 2009,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "38dac452acbdd7762ba9aa67e268c249835dad01e219ff2f50d93e4533aa7c52",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) calls DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "39745c2ba61544fe128a7627287a023e043a087ee32100d6e0bfe5b404209670",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.initiator() (src/L1/DelayedVetoable.sol#96-98) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "initiator",
    "start": 4013,
    "length": 119,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "39745c2ba61544fe128a7627287a023e043a087ee32100d6e0bfe5b404209670",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.initiator() (src/L1/DelayedVetoable.sol#96-98) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "39745c2ba61544fe128a7627287a023e043a087ee32100d6e0bfe5b404209670",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.initiator() (src/L1/DelayedVetoable.sol#96-98) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "3f56bbd28cbf0b716ac3b0a61479a74ece176d3e2f2a53dd16994daa375a5468",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) calls DelayedVetoable._forwardAndHalt(bytes32) (src/L1/DelayedVetoable.sol#184-197) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "_handleCall",
    "start": 5365,
    "length": 2009,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "3f56bbd28cbf0b716ac3b0a61479a74ece176d3e2f2a53dd16994daa375a5468",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) calls DelayedVetoable._forwardAndHalt(bytes32) (src/L1/DelayedVetoable.sol#184-197) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "_forwardAndHalt",
    "start": 7454,
    "length": 466,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "3f56bbd28cbf0b716ac3b0a61479a74ece176d3e2f2a53dd16994daa375a5468",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181) calls DelayedVetoable._forwardAndHalt(bytes32) (src/L1/DelayedVetoable.sol#184-197) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "40da9d5df6ace4d9b107bfd175846739fa74c9a29d3b6d94d1b8ce9dfa13aa05",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "queuedAt",
    "start": 4865,
    "length": 134,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "40da9d5df6ace4d9b107bfd175846739fa74c9a29d3b6d94d1b8ce9dfa13aa05",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "40da9d5df6ace4d9b107bfd175846739fa74c9a29d3b6d94d1b8ce9dfa13aa05",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "4ea64b8e0080de740c9c25e7841217213a680d8680654c8c9f744be145a1431a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setCode(bytes) (src/legacy/L1ChugSplashProxy.sol#96-124) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "setCode",
    "start": 5022,
    "length": 1285,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "4ea64b8e0080de740c9c25e7841217213a680d8680654c8c9f744be145a1431a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setCode(bytes) (src/legacy/L1ChugSplashProxy.sol#96-124) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "4ea64b8e0080de740c9c25e7841217213a680d8680654c8c9f744be145a1431a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setCode(bytes) (src/legacy/L1ChugSplashProxy.sol#96-124) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "5dbecee956931b503b0ed4fbb7be62ba5f9f64bab10ac87b3c5ba4dab3694bec",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeTo(address) (src/universal/Proxy.sol#59-61) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "upgradeTo",
    "start": 2498,
    "length": 131,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "5dbecee956931b503b0ed4fbb7be62ba5f9f64bab10ac87b3c5ba4dab3694bec",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeTo(address) (src/universal/Proxy.sol#59-61) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "5dbecee956931b503b0ed4fbb7be62ba5f9f64bab10ac87b3c5ba4dab3694bec",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.upgradeTo(address) (src/universal/Proxy.sol#59-61) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "5f00d9ac316494d702da33c92ba3267b0b2a5ab498b5c720e942923a75fd0f50",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.changeAdmin(address) (src/universal/Proxy.sol#85-87) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "changeAdmin",
    "start": 3563,
    "length": 109,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "5f00d9ac316494d702da33c92ba3267b0b2a5ab498b5c720e942923a75fd0f50",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.changeAdmin(address) (src/universal/Proxy.sol#85-87) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "5f00d9ac316494d702da33c92ba3267b0b2a5ab498b5c720e942923a75fd0f50",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.changeAdmin(address) (src/universal/Proxy.sol#85-87) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "61c6823d9d96abad705c3e29c3768a5d2ade61e6f226c9241e6f3278063ab469",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.admin() (src/universal/Proxy.sol#91-93) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "admin",
    "start": 3763,
    "length": 105,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "61c6823d9d96abad705c3e29c3768a5d2ade61e6f226c9241e6f3278063ab469",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.admin() (src/universal/Proxy.sol#91-93) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "61c6823d9d96abad705c3e29c3768a5d2ade61e6f226c9241e6f3278063ab469",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.admin() (src/universal/Proxy.sol#91-93) calls Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "648de83c485a902ab3df50445e187c6390720ae77705d14edbcc112e4fd8fe1a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) calls L1ChugSplashProxy._doProxyCall() (src/legacy/L1ChugSplashProxy.sol#175-198) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "648de83c485a902ab3df50445e187c6390720ae77705d14edbcc112e4fd8fe1a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) calls L1ChugSplashProxy._doProxyCall() (src/legacy/L1ChugSplashProxy.sol#175-198) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "_doProxyCall",
    "start": 8349,
    "length": 1099,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "648de83c485a902ab3df50445e187c6390720ae77705d14edbcc112e4fd8fe1a",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) calls L1ChugSplashProxy._doProxyCall() (src/legacy/L1ChugSplashProxy.sol#175-198) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "6cf6408cd8c7aedc182552abc25970ede8e033409292304b75b62006b0ad9491",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.delay() (src/L1/DelayedVetoable.sol#114-116) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "delay",
    "start": 4595,
    "length": 96,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "6cf6408cd8c7aedc182552abc25970ede8e033409292304b75b62006b0ad9491",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.delay() (src/L1/DelayedVetoable.sol#114-116) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "function",
    "name": "readOrHandle",
    "start": 2953,
    "length": 200,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "6cf6408cd8c7aedc182552abc25970ede8e033409292304b75b62006b0ad9491",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "DelayedVetoable.delay() (src/L1/DelayedVetoable.sol#114-116) calls DelayedVetoable.readOrHandle() (src/L1/DelayedVetoable.sol#67-74) which halt the execution return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata)) (src/L1/DelayedVetoable.sol#190)\n",
    "type": "node",
    "name": "return(uint256,uint256)(returndata + 0x20,mload(uint256)(returndata))",
    "start": 7723,
    "length": 48,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "98821b545d4849522091839fbd87144e6fcc256a73b9dd1817676bd127be6d8c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getOwner() (src/legacy/L1ChugSplashProxy.sol#145-147) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "getOwner",
    "start": 7200,
    "length": 102,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "98821b545d4849522091839fbd87144e6fcc256a73b9dd1817676bd127be6d8c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getOwner() (src/legacy/L1ChugSplashProxy.sol#145-147) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "98821b545d4849522091839fbd87144e6fcc256a73b9dd1817676bd127be6d8c",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.getOwner() (src/legacy/L1ChugSplashProxy.sol#145-147) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "c116aac23f49ec7d5d6574972abfbf02d56d0521ea2285dc09d239a829e7d2af",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setStorage(bytes32,bytes32) (src/legacy/L1ChugSplashProxy.sol#130-134) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "setStorage",
    "start": 6596,
    "length": 148,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "c116aac23f49ec7d5d6574972abfbf02d56d0521ea2285dc09d239a829e7d2af",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setStorage(bytes32,bytes32) (src/legacy/L1ChugSplashProxy.sol#130-134) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "function",
    "name": "proxyCallIfNotOwner",
    "start": 3867,
    "length": 237,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "c116aac23f49ec7d5d6574972abfbf02d56d0521ea2285dc09d239a829e7d2af",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "L1ChugSplashProxy.setStorage(bytes32,bytes32) (src/legacy/L1ChugSplashProxy.sol#130-134) calls L1ChugSplashProxy.proxyCallIfNotOwner() (src/legacy/L1ChugSplashProxy.sol#64-71) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/legacy/L1ChugSplashProxy.sol#196)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 9403,
    "length": 29,
    "filename_relative": "src/legacy/L1ChugSplashProxy.sol"
  },
  {
    "id": "d14996b9cc4486d4926155fb1f3d0c1ffc8be9b4af43a61074039356721c7e45",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) calls Proxy._doProxyCall() (src/universal/Proxy.sol#123-145) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "proxyCallIfNotAdmin",
    "start": 1295,
    "length": 237,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "d14996b9cc4486d4926155fb1f3d0c1ffc8be9b4af43a61074039356721c7e45",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) calls Proxy._doProxyCall() (src/universal/Proxy.sol#123-145) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "function",
    "name": "_doProxyCall",
    "start": 4928,
    "length": 1039,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "d14996b9cc4486d4926155fb1f3d0c1ffc8be9b4af43a61074039356721c7e45",
    "impact": "High",
    "confidence": "Medium",
    "check": "incorrect-return",
    "description": "Proxy.proxyCallIfNotAdmin() (src/universal/Proxy.sol#26-33) calls Proxy._doProxyCall() (src/universal/Proxy.sol#123-145) which halt the execution return(uint256,uint256)(0x0,returndatasize()()) (src/universal/Proxy.sol#143)\n",
    "type": "node",
    "name": "return(uint256,uint256)(0x0,returndatasize()())",
    "start": 5922,
    "length": 29,
    "filename_relative": "src/universal/Proxy.sol"
  },
  {
    "id": "33a64923b39c77049fac57d836ecb779a122f69c358e543dbafeb8b7556bbc6e",
    "impact": "High",
    "confidence": "High",
    "check": "uninitialized-state",
    "description": "BobaHCHelper.pendingCharge (src/boba/BobaHCHelper.sol#28) is never initialized. It is used in:\n\t- BobaHCHelper.getCachedResponse(bytes32,address,uint256) (src/boba/BobaHCHelper.sol#179-201)\n",
    "type": "variable",
    "name": "pendingCharge",
    "start": 1114,
    "length": 48,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "33a64923b39c77049fac57d836ecb779a122f69c358e543dbafeb8b7556bbc6e",
    "impact": "High",
    "confidence": "High",
    "check": "uninitialized-state",
    "description": "BobaHCHelper.pendingCharge (src/boba/BobaHCHelper.sol#28) is never initialized. It is used in:\n\t- BobaHCHelper.getCachedResponse(bytes32,address,uint256) (src/boba/BobaHCHelper.sol#179-201)\n",
    "type": "function",
    "name": "getCachedResponse",
    "start": 6883,
    "length": 835,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "b9d3fe8f33617e17de9e9ecb30a6a6f56548148b108af04bb8e53e93a6ec12e0",
    "impact": "High",
    "confidence": "High",
    "check": "uninitialized-state",
    "description": "BobaHCHelper.legacyWhitelist (src/boba/BobaHCHelper.sol#29) is never initialized. It is used in:\n\t- BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238)\n",
    "type": "variable",
    "name": "legacyWhitelist",
    "start": 1183,
    "length": 47,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "b9d3fe8f33617e17de9e9ecb30a6a6f56548148b108af04bb8e53e93a6ec12e0",
    "impact": "High",
    "confidence": "High",
    "check": "uninitialized-state",
    "description": "BobaHCHelper.legacyWhitelist (src/boba/BobaHCHelper.sol#29) is never initialized. It is used in:\n\t- BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238)\n",
    "type": "function",
    "name": "GetLegacyResponse",
    "start": 8221,
    "length": 1247,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "04d7e83d57cab6ea7d967f6158ea1f3642c4077d81742230b69732e1aac642db",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "boolean-cst",
    "description": "BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238) uses a Boolean constant improperly:\n\t-require(bool,string)(legacyWhitelist[msg.sender] || true,Legacy caller is not in whitelist) (src/boba/BobaHCHelper.sol#219)\n",
    "type": "function",
    "name": "GetLegacyResponse",
    "start": 8221,
    "length": 1247,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "04d7e83d57cab6ea7d967f6158ea1f3642c4077d81742230b69732e1aac642db",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "boolean-cst",
    "description": "BobaHCHelper.GetLegacyResponse(uint32,string,bytes) (src/boba/BobaHCHelper.sol#214-238) uses a Boolean constant improperly:\n\t-require(bool,string)(legacyWhitelist[msg.sender] || true,Legacy caller is not in whitelist) (src/boba/BobaHCHelper.sol#219)\n",
    "type": "node",
    "name": "require(bool,string)(legacyWhitelist[msg.sender] || true,Legacy caller is not in whitelist)",
    "start": 8548,
    "length": 81,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "89460308ae3bd86a612657eb7bfe28221ced6a7a7fe723ec2a19149bfc819cb5",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract L2OutputOracle (src/L1/L2OutputOracle.sol#14-296) has payable functions:\n\t - L2OutputOracle.proposeL2Output(bytes32,uint256,bytes32,uint256) (src/L1/L2OutputOracle.sol#168-215)\n\tBut does not have a function to withdraw the ether\n",
    "type": "contract",
    "name": "L2OutputOracle",
    "start": 611,
    "length": 12768,
    "filename_relative": "src/L1/L2OutputOracle.sol"
  },
  {
    "id": "89460308ae3bd86a612657eb7bfe28221ced6a7a7fe723ec2a19149bfc819cb5",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract L2OutputOracle (src/L1/L2OutputOracle.sol#14-296) has payable functions:\n\t - L2OutputOracle.proposeL2Output(bytes32,uint256,bytes32,uint256) (src/L1/L2OutputOracle.sol#168-215)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "proposeL2Output",
    "start": 7598,
    "length": 1981,
    "filename_relative": "src/L1/L2OutputOracle.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "contract",
    "name": "FaultDisputeGame",
    "start": 1080,
    "length": 24930,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attack",
    "start": 2181,
    "length": 69,
    "filename_relative": "src/dispute/interfaces/IFaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "defend",
    "start": 2454,
    "length": 69,
    "filename_relative": "src/dispute/interfaces/IFaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "resolveClaim",
    "start": 4428,
    "length": 60,
    "filename_relative": "src/dispute/interfaces/IFaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "move",
    "start": 9008,
    "length": 3953,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attack",
    "start": 13005,
    "length": 118,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "defend",
    "start": 13167,
    "length": 119,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "99c01b42fc96fd11586bce47c0e6edbb6697d3feda3cfe6ede5b03b79ac5af81",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract FaultDisputeGame (src/dispute/FaultDisputeGame.sol#24-557) has payable functions:\n\t - IFaultDisputeGame.attack(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#51)\n\t - IFaultDisputeGame.defend(uint256,Claim) (src/dispute/interfaces/IFaultDisputeGame.sol#56)\n\t - IFaultDisputeGame.resolveClaim(uint256) (src/dispute/interfaces/IFaultDisputeGame.sol#83)\n\t - FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t - FaultDisputeGame.attack(uint256,Claim) (src/dispute/FaultDisputeGame.sol#271-273)\n\t - FaultDisputeGame.defend(uint256,Claim) (src/dispute/FaultDisputeGame.sol#276-278)\n\t - FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "resolveClaim",
    "start": 17110,
    "length": 2033,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "contract",
    "name": "OutputBisectionGame",
    "start": 973,
    "length": 32190,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attack",
    "start": 1139,
    "length": 69,
    "filename_relative": "src/dispute/interfaces/IOutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "defend",
    "start": 1412,
    "length": 69,
    "filename_relative": "src/dispute/interfaces/IOutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "resolveClaim",
    "start": 3429,
    "length": 60,
    "filename_relative": "src/dispute/interfaces/IOutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "move",
    "start": 9620,
    "length": 4512,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attack",
    "start": 14179,
    "length": 118,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "defend",
    "start": 14344,
    "length": 119,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "a163cee00f9eadca42657b9e68feeb6933902bdb0d38f8fa1490a82a355b68dc",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract OutputBisectionGame (src/dispute/OutputBisectionGame.sol#22-687) has payable functions:\n\t - IOutputBisectionGame.attack(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#30)\n\t - IOutputBisectionGame.defend(uint256,Claim) (src/dispute/interfaces/IOutputBisectionGame.sol#35)\n\t - IOutputBisectionGame.resolveClaim(uint256) (src/dispute/interfaces/IOutputBisectionGame.sol#62)\n\t - OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t - OutputBisectionGame.attack(uint256,Claim) (src/dispute/OutputBisectionGame.sol#287-289)\n\t - OutputBisectionGame.defend(uint256,Claim) (src/dispute/OutputBisectionGame.sol#292-294)\n\t - OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "resolveClaim",
    "start": 18011,
    "length": 2043,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "c0920fe4b6b04a2b81f69b85402d465719d06978441052f49a6582415934a1bf",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract L1BlockNumber (src/legacy/L1BlockNumber.sol#16-45) has payable functions:\n\t - L1BlockNumber.receive() (src/legacy/L1BlockNumber.sol#22-28)\n\t - L1BlockNumber.fallback() (src/legacy/L1BlockNumber.sol#32-38)\n\tBut does not have a function to withdraw the ether\n",
    "type": "contract",
    "name": "L1BlockNumber",
    "start": 668,
    "length": 888,
    "filename_relative": "src/legacy/L1BlockNumber.sol"
  },
  {
    "id": "c0920fe4b6b04a2b81f69b85402d465719d06978441052f49a6582415934a1bf",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract L1BlockNumber (src/legacy/L1BlockNumber.sol#16-45) has payable functions:\n\t - L1BlockNumber.receive() (src/legacy/L1BlockNumber.sol#22-28)\n\t - L1BlockNumber.fallback() (src/legacy/L1BlockNumber.sol#32-38)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "receive",
    "start": 863,
    "length": 178,
    "filename_relative": "src/legacy/L1BlockNumber.sol"
  },
  {
    "id": "c0920fe4b6b04a2b81f69b85402d465719d06978441052f49a6582415934a1bf",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract L1BlockNumber (src/legacy/L1BlockNumber.sol#16-45) has payable functions:\n\t - L1BlockNumber.receive() (src/legacy/L1BlockNumber.sol#22-28)\n\t - L1BlockNumber.fallback() (src/legacy/L1BlockNumber.sol#32-38)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "fallback",
    "start": 1145,
    "length": 179,
    "filename_relative": "src/legacy/L1BlockNumber.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "contract",
    "name": "SchemaResolver",
    "start": 350,
    "length": 5868,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attest",
    "start": 565,
    "length": 82,
    "filename_relative": "src/EAS/resolver/ISchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "multiAttest",
    "start": 926,
    "length": 163,
    "filename_relative": "src/EAS/resolver/ISchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "revoke",
    "start": 1305,
    "length": 82,
    "filename_relative": "src/EAS/resolver/ISchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "multiRevoke",
    "start": 1695,
    "length": 163,
    "filename_relative": "src/EAS/resolver/ISchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "receive",
    "start": 1054,
    "length": 113,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "attest",
    "start": 1209,
    "length": 146,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "multiAttest",
    "start": 1397,
    "length": 1497,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "revoke",
    "start": 2936,
    "length": 146,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "3e52f3459d6607e6494e893c33e98bfaee52639c20f8e8366a39b97d30efeb9d",
    "impact": "Medium",
    "confidence": "High",
    "check": "locked-ether",
    "description": "Contract locking ether found:\n\tContract SchemaResolver (src/EAS/resolver/SchemaResolver.sol#11-165) has payable functions:\n\t - ISchemaResolver.attest(Attestation) (src/EAS/resolver/ISchemaResolver.sol#16)\n\t - ISchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#22-28)\n\t - ISchemaResolver.revoke(Attestation) (src/EAS/resolver/ISchemaResolver.sol#33)\n\t - ISchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/ISchemaResolver.sol#39-45)\n\t - SchemaResolver.receive() (src/EAS/resolver/SchemaResolver.sol#41-45)\n\t - SchemaResolver.attest(Attestation) (src/EAS/resolver/SchemaResolver.sol#48-50)\n\t - SchemaResolver.multiAttest(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#53-92)\n\t - SchemaResolver.revoke(Attestation) (src/EAS/resolver/SchemaResolver.sol#95-97)\n\t - SchemaResolver.multiRevoke(Attestation[],uint256[]) (src/EAS/resolver/SchemaResolver.sol#100-139)\n\tBut does not have a function to withdraw the ether\n",
    "type": "function",
    "name": "multiRevoke",
    "start": 3124,
    "length": 1496,
    "filename_relative": "src/EAS/resolver/SchemaResolver.sol"
  },
  {
    "id": "30b7fb36a555d62a0e1b1c20fb8ca2a7731012ecb4fb8c4ae7b939d216d85408",
    "impact": "Medium",
    "confidence": "High",
    "check": "mapping-deletion",
    "description": "BobaHCHelper.UnregisterEndpoint(string) (src/boba/BobaHCHelper.sol#118-125) deletes BobaHCHelper.EndpointEntry (src/boba/BobaHCHelper.sol#31-34) which contains a mapping:\n\t-delete (Endpoints[EK]) (src/boba/BobaHCHelper.sol#123)\n",
    "type": "function",
    "name": "UnregisterEndpoint",
    "start": 4203,
    "length": 365,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "30b7fb36a555d62a0e1b1c20fb8ca2a7731012ecb4fb8c4ae7b939d216d85408",
    "impact": "Medium",
    "confidence": "High",
    "check": "mapping-deletion",
    "description": "BobaHCHelper.UnregisterEndpoint(string) (src/boba/BobaHCHelper.sol#118-125) deletes BobaHCHelper.EndpointEntry (src/boba/BobaHCHelper.sol#31-34) which contains a mapping:\n\t-delete (Endpoints[EK]) (src/boba/BobaHCHelper.sol#123)\n",
    "type": "struct",
    "name": "EndpointEntry",
    "start": 1237,
    "length": 102,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "30b7fb36a555d62a0e1b1c20fb8ca2a7731012ecb4fb8c4ae7b939d216d85408",
    "impact": "Medium",
    "confidence": "High",
    "check": "mapping-deletion",
    "description": "BobaHCHelper.UnregisterEndpoint(string) (src/boba/BobaHCHelper.sol#118-125) deletes BobaHCHelper.EndpointEntry (src/boba/BobaHCHelper.sol#31-34) which contains a mapping:\n\t-delete (Endpoints[EK]) (src/boba/BobaHCHelper.sol#123)\n",
    "type": "node",
    "name": "delete (Endpoints[EK])",
    "start": 4487,
    "length": 21,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "function",
    "name": "phase1",
    "start": 20395,
    "length": 66,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step1()",
    "start": 20438,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager)",
    "start": 8359,
    "length": 84,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED)",
    "start": 8516,
    "length": 143,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger)",
    "start": 8733,
    "length": 151,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH)",
    "start": 8953,
    "length": 139,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG())))",
    "start": 9177,
    "length": 654,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step2()",
    "start": 20451,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0))",
    "start": 10590,
    "length": 87,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number)))",
    "start": 11023,
    "length": 98,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step2()",
    "start": 20451,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0b2226f42e3adc35ddb012defd30129ee1ac859209c5b080da1916b803b8be0e",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase1() (src/deployment/SystemDictator.sol#545-548):\n\tExternal calls:\n\t- step1() (src/deployment/SystemDictator.sol#546)\n\t\t- config.globalConfig.proxyAdmin.setAddressManager(config.globalConfig.addressManager) (src/deployment/SystemDictator.sol#282)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1CrossDomainMessengerProxy,ProxyAdmin.ProxyType.RESOLVED) (src/deployment/SystemDictator.sol#285-287)\n\t\t- config.globalConfig.proxyAdmin.setImplementationName(config.proxyAddressConfig.l1CrossDomainMessengerProxy,OVM_L1CrossDomainMessenger) (src/deployment/SystemDictator.sol#290-292)\n\t\t- config.globalConfig.proxyAdmin.setProxyType(config.proxyAddressConfig.l1StandardBridgeProxy,ProxyAdmin.ProxyType.CHUGSPLASH) (src/deployment/SystemDictator.sol#295-297)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.systemConfigProxy),address(config.implementationAddressConfig.systemConfigImpl),abi.encodeCall(SystemConfig.initialize,(config.systemConfigConfig.owner,config.systemConfigConfig.overhead,config.systemConfigConfig.scalar,config.systemConfigConfig.batcherHash,config.systemConfigConfig.gasLimit,config.systemConfigConfig.unsafeBlockSigner,Constants.DEFAULT_RESOURCE_CONFIG()))) (src/deployment/SystemDictator.sol#300-315)\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- config.globalConfig.addressManager.setAddress(OVM_L1CrossDomainMessenger,address(0)) (src/deployment/SystemDictator.sol#330)\n\t\t- config.globalConfig.addressManager.setAddress(DTL_SHUTOFF_BLOCK,address(uint160(block.number))) (src/deployment/SystemDictator.sol#336)\n\tState variables written after the call(s):\n\t- step2() (src/deployment/SystemDictator.sol#547)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "currentStep ++",
    "start": 5594,
    "length": 13,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "0e1e451177ca06fd343007706a5c0c9d51f9fe188265e5d192703a2a4db433fc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,0) == Claim.unwrap(postState.claim) (src/dispute/FaultDisputeGame.sol#177)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/FaultDisputeGame.sol#183)\n\tFaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68) can be used in cross function reentrancies:\n\t- FaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68)\n\t- FaultDisputeGame.claimDataLen() (src/dispute/FaultDisputeGame.sol#532-534)\n\t- FaultDisputeGame.findTraceAncestor(Position,uint256) (src/dispute/FaultDisputeGame.sol#546-556)\n\t- FaultDisputeGame.initialize() (src/dispute/FaultDisputeGame.sol#448-529)\n\t- FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t- FaultDisputeGame.resolve() (src/dispute/FaultDisputeGame.sol#360-369)\n\t- FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\t- FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184)\n",
    "type": "function",
    "name": "step",
    "start": 5018,
    "length": 3685,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "0e1e451177ca06fd343007706a5c0c9d51f9fe188265e5d192703a2a4db433fc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,0) == Claim.unwrap(postState.claim) (src/dispute/FaultDisputeGame.sol#177)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/FaultDisputeGame.sol#183)\n\tFaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68) can be used in cross function reentrancies:\n\t- FaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68)\n\t- FaultDisputeGame.claimDataLen() (src/dispute/FaultDisputeGame.sol#532-534)\n\t- FaultDisputeGame.findTraceAncestor(Position,uint256) (src/dispute/FaultDisputeGame.sol#546-556)\n\t- FaultDisputeGame.initialize() (src/dispute/FaultDisputeGame.sol#448-529)\n\t- FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t- FaultDisputeGame.resolve() (src/dispute/FaultDisputeGame.sol#360-369)\n\t- FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\t- FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184)\n",
    "type": "node",
    "name": "validStep = VM.step(_stateData,_proof,0) == Claim.unwrap(postState.claim)",
    "start": 8264,
    "length": 80,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "0e1e451177ca06fd343007706a5c0c9d51f9fe188265e5d192703a2a4db433fc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,0) == Claim.unwrap(postState.claim) (src/dispute/FaultDisputeGame.sol#177)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/FaultDisputeGame.sol#183)\n\tFaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68) can be used in cross function reentrancies:\n\t- FaultDisputeGame.claimData (src/dispute/FaultDisputeGame.sol#68)\n\t- FaultDisputeGame.claimDataLen() (src/dispute/FaultDisputeGame.sol#532-534)\n\t- FaultDisputeGame.findTraceAncestor(Position,uint256) (src/dispute/FaultDisputeGame.sol#546-556)\n\t- FaultDisputeGame.initialize() (src/dispute/FaultDisputeGame.sol#448-529)\n\t- FaultDisputeGame.move(uint256,Claim,bool) (src/dispute/FaultDisputeGame.sol#190-268)\n\t- FaultDisputeGame.resolve() (src/dispute/FaultDisputeGame.sol#360-369)\n\t- FaultDisputeGame.resolveClaim(uint256) (src/dispute/FaultDisputeGame.sol#372-422)\n\t- FaultDisputeGame.step(uint256,bool,bytes,bytes) (src/dispute/FaultDisputeGame.sol#121-184)\n",
    "type": "node",
    "name": "parent.countered = true",
    "start": 8673,
    "length": 23,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "1349b68c3b08ecdf27782bd74d9fecadf1739eef738171cbbba403c77a29f424",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in TransferOnion.peel(TransferOnion.Layer[]) (src/periphery/TransferOnion.sol#44-70):\n\tExternal calls:\n\t- TOKEN.safeTransferFrom(SENDER,layer.recipient,layer.amount) (src/periphery/TransferOnion.sol#61)\n\tState variables written after the call(s):\n\t- shell = tempShell (src/periphery/TransferOnion.sol#69)\n\tTransferOnion.shell (src/periphery/TransferOnion.sol#30) can be used in cross function reentrancies:\n\t- TransferOnion.constructor(ERC20,address,bytes32) (src/periphery/TransferOnion.sol#36-40)\n\t- TransferOnion.shell (src/periphery/TransferOnion.sol#30)\n",
    "type": "function",
    "name": "peel",
    "start": 1616,
    "length": 885,
    "filename_relative": "src/periphery/TransferOnion.sol"
  },
  {
    "id": "1349b68c3b08ecdf27782bd74d9fecadf1739eef738171cbbba403c77a29f424",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in TransferOnion.peel(TransferOnion.Layer[]) (src/periphery/TransferOnion.sol#44-70):\n\tExternal calls:\n\t- TOKEN.safeTransferFrom(SENDER,layer.recipient,layer.amount) (src/periphery/TransferOnion.sol#61)\n\tState variables written after the call(s):\n\t- shell = tempShell (src/periphery/TransferOnion.sol#69)\n\tTransferOnion.shell (src/periphery/TransferOnion.sol#30) can be used in cross function reentrancies:\n\t- TransferOnion.constructor(ERC20,address,bytes32) (src/periphery/TransferOnion.sol#36-40)\n\t- TransferOnion.shell (src/periphery/TransferOnion.sol#30)\n",
    "type": "node",
    "name": "TOKEN.safeTransferFrom(SENDER,layer.recipient,layer.amount)",
    "start": 2282,
    "length": 61,
    "filename_relative": "src/periphery/TransferOnion.sol"
  },
  {
    "id": "1349b68c3b08ecdf27782bd74d9fecadf1739eef738171cbbba403c77a29f424",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in TransferOnion.peel(TransferOnion.Layer[]) (src/periphery/TransferOnion.sol#44-70):\n\tExternal calls:\n\t- TOKEN.safeTransferFrom(SENDER,layer.recipient,layer.amount) (src/periphery/TransferOnion.sol#61)\n\tState variables written after the call(s):\n\t- shell = tempShell (src/periphery/TransferOnion.sol#69)\n\tTransferOnion.shell (src/periphery/TransferOnion.sol#30) can be used in cross function reentrancies:\n\t- TransferOnion.constructor(ERC20,address,bytes32) (src/periphery/TransferOnion.sol#36-40)\n\t- TransferOnion.shell (src/periphery/TransferOnion.sol#30)\n",
    "type": "node",
    "name": "shell = tempShell",
    "start": 2477,
    "length": 17,
    "filename_relative": "src/periphery/TransferOnion.sol"
  },
  {
    "id": "14134bc23d372275d187f91848cac770b21d8451fa7b979380dc2ac94588945b",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181):\n\tExternal calls:\n\t- _forwardAndHalt(callHash) (src/L1/DelayedVetoable.sol#150)\n\t\t- (success,returndata) = TARGET.call(msg.data) (src/L1/DelayedVetoable.sol#187)\n\tState variables written after the call(s):\n\t- _queuedAt[callHash] = block.timestamp (src/L1/DelayedVetoable.sol#152)\n\tDelayedVetoable._queuedAt (src/L1/DelayedVetoable.sol#61) can be used in cross function reentrancies:\n\t- DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181)\n\t- DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123)\n",
    "type": "function",
    "name": "_handleCall",
    "start": 5365,
    "length": 2009,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "14134bc23d372275d187f91848cac770b21d8451fa7b979380dc2ac94588945b",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181):\n\tExternal calls:\n\t- _forwardAndHalt(callHash) (src/L1/DelayedVetoable.sol#150)\n\t\t- (success,returndata) = TARGET.call(msg.data) (src/L1/DelayedVetoable.sol#187)\n\tState variables written after the call(s):\n\t- _queuedAt[callHash] = block.timestamp (src/L1/DelayedVetoable.sol#152)\n\tDelayedVetoable._queuedAt (src/L1/DelayedVetoable.sol#61) can be used in cross function reentrancies:\n\t- DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181)\n\t- DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123)\n",
    "type": "node",
    "name": "_forwardAndHalt(callHash)",
    "start": 6102,
    "length": 25,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "14134bc23d372275d187f91848cac770b21d8451fa7b979380dc2ac94588945b",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181):\n\tExternal calls:\n\t- _forwardAndHalt(callHash) (src/L1/DelayedVetoable.sol#150)\n\t\t- (success,returndata) = TARGET.call(msg.data) (src/L1/DelayedVetoable.sol#187)\n\tState variables written after the call(s):\n\t- _queuedAt[callHash] = block.timestamp (src/L1/DelayedVetoable.sol#152)\n\tDelayedVetoable._queuedAt (src/L1/DelayedVetoable.sol#61) can be used in cross function reentrancies:\n\t- DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181)\n\t- DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123)\n",
    "type": "node",
    "name": "(success,returndata) = TARGET.call(msg.data)",
    "start": 7588,
    "length": 63,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "14134bc23d372275d187f91848cac770b21d8451fa7b979380dc2ac94588945b",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181):\n\tExternal calls:\n\t- _forwardAndHalt(callHash) (src/L1/DelayedVetoable.sol#150)\n\t\t- (success,returndata) = TARGET.call(msg.data) (src/L1/DelayedVetoable.sol#187)\n\tState variables written after the call(s):\n\t- _queuedAt[callHash] = block.timestamp (src/L1/DelayedVetoable.sol#152)\n\tDelayedVetoable._queuedAt (src/L1/DelayedVetoable.sol#61) can be used in cross function reentrancies:\n\t- DelayedVetoable._handleCall() (src/L1/DelayedVetoable.sol#133-181)\n\t- DelayedVetoable.queuedAt(bytes32) (src/L1/DelayedVetoable.sol#121-123)\n",
    "type": "node",
    "name": "_queuedAt[callHash] = block.timestamp",
    "start": 6155,
    "length": 37,
    "filename_relative": "src/L1/DelayedVetoable.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "function",
    "name": "phase2",
    "start": 20549,
    "length": 95,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step3()",
    "start": 20592,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.setAddress(deprecated[i],address(0))",
    "start": 12031,
    "length": 72,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step4()",
    "start": 20605,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin))",
    "start": 12312,
    "length": 93,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin))",
    "start": 12481,
    "length": 139,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin))",
    "start": 12694,
    "length": 128,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step5()",
    "start": 20618,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp)))",
    "start": 13161,
    "length": 444,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig))))",
    "start": 13662,
    "length": 360,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl))",
    "start": 14072,
    "length": 196,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 14372,
    "length": 897,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,()))",
    "start": 15344,
    "length": 236,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl))",
    "start": 15641,
    "length": 184,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl))",
    "start": 15898,
    "length": 208,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl))",
    "start": 16165,
    "length": 180,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl))",
    "start": 16405,
    "length": 184,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 16687,
    "length": 886,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 17668,
    "length": 900,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion)",
    "start": 18665,
    "length": 1013,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false)",
    "start": 19775,
    "length": 547,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "finalize()",
    "start": 20631,
    "length": 10,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner)",
    "start": 20817,
    "length": 80,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner))",
    "start": 21158,
    "length": 93,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner))",
    "start": 21336,
    "length": 147,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner))",
    "start": 21566,
    "length": 136,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "finalize()",
    "start": 20631,
    "length": 10,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "6dabb5252b283b5815f83499e1045228ec4df0ff3abc297e88a41af65c4eba38",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- config.globalConfig.proxyAdmin.transferOwnership(config.globalConfig.finalOwner) (src/deployment/SystemDictator.sol#565)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#571)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#574-576)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.finalOwner)) (src/deployment/SystemDictator.sol#579-581)\n\tState variables written after the call(s):\n\t- finalize() (src/deployment/SystemDictator.sol#557)\n\t\t- finalized = true (src/deployment/SystemDictator.sol#585)\n\tSystemDictator.finalized (src/deployment/SystemDictator.sol#175) can be used in cross function reentrancies:\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.finalized (src/deployment/SystemDictator.sol#175)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "finalized = true",
    "start": 21756,
    "length": 16,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "d82cfe766b00c59f366ae7274ce981a0720d0b8df7cbbcdb554745f33a3a7992",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,Hash.unwrap(uuid)) == Claim.unwrap(postState.claim) (src/dispute/OutputBisectionGame.sol#184)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/OutputBisectionGame.sol#190)\n\tOutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72) can be used in cross function reentrancies:\n\t- OutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72)\n\t- OutputBisectionGame.claimDataLen() (src/dispute/OutputBisectionGame.sol#473-475)\n\t- OutputBisectionGame.findStartingAndDisputedOutputs(uint256) (src/dispute/OutputBisectionGame.sol#591-652)\n\t- OutputBisectionGame.findTraceAncestor(Position,uint256,bool) (src/dispute/OutputBisectionGame.sol#564-582)\n\t- OutputBisectionGame.initialize() (src/dispute/OutputBisectionGame.sol#440-470)\n\t- OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t- OutputBisectionGame.resolve() (src/dispute/OutputBisectionGame.sol#349-361)\n\t- OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\t- OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191)\n",
    "type": "function",
    "name": "step",
    "start": 5053,
    "length": 4262,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "d82cfe766b00c59f366ae7274ce981a0720d0b8df7cbbcdb554745f33a3a7992",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,Hash.unwrap(uuid)) == Claim.unwrap(postState.claim) (src/dispute/OutputBisectionGame.sol#184)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/OutputBisectionGame.sol#190)\n\tOutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72) can be used in cross function reentrancies:\n\t- OutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72)\n\t- OutputBisectionGame.claimDataLen() (src/dispute/OutputBisectionGame.sol#473-475)\n\t- OutputBisectionGame.findStartingAndDisputedOutputs(uint256) (src/dispute/OutputBisectionGame.sol#591-652)\n\t- OutputBisectionGame.findTraceAncestor(Position,uint256,bool) (src/dispute/OutputBisectionGame.sol#564-582)\n\t- OutputBisectionGame.initialize() (src/dispute/OutputBisectionGame.sol#440-470)\n\t- OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t- OutputBisectionGame.resolve() (src/dispute/OutputBisectionGame.sol#349-361)\n\t- OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\t- OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191)\n",
    "type": "node",
    "name": "validStep = VM.step(_stateData,_proof,Hash.unwrap(uuid)) == Claim.unwrap(postState.claim)",
    "start": 8860,
    "length": 96,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "d82cfe766b00c59f366ae7274ce981a0720d0b8df7cbbcdb554745f33a3a7992",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191):\n\tExternal calls:\n\t- validStep = VM.step(_stateData,_proof,Hash.unwrap(uuid)) == Claim.unwrap(postState.claim) (src/dispute/OutputBisectionGame.sol#184)\n\tState variables written after the call(s):\n\t- parent.countered = true (src/dispute/OutputBisectionGame.sol#190)\n\tOutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72) can be used in cross function reentrancies:\n\t- OutputBisectionGame.claimData (src/dispute/OutputBisectionGame.sol#72)\n\t- OutputBisectionGame.claimDataLen() (src/dispute/OutputBisectionGame.sol#473-475)\n\t- OutputBisectionGame.findStartingAndDisputedOutputs(uint256) (src/dispute/OutputBisectionGame.sol#591-652)\n\t- OutputBisectionGame.findTraceAncestor(Position,uint256,bool) (src/dispute/OutputBisectionGame.sol#564-582)\n\t- OutputBisectionGame.initialize() (src/dispute/OutputBisectionGame.sol#440-470)\n\t- OutputBisectionGame.move(uint256,Claim,bool) (src/dispute/OutputBisectionGame.sol#197-284)\n\t- OutputBisectionGame.resolve() (src/dispute/OutputBisectionGame.sol#349-361)\n\t- OutputBisectionGame.resolveClaim(uint256) (src/dispute/OutputBisectionGame.sol#364-414)\n\t- OutputBisectionGame.step(uint256,bool,bytes,bytes) (src/dispute/OutputBisectionGame.sol#124-191)\n",
    "type": "node",
    "name": "parent.countered = true",
    "start": 9285,
    "length": 23,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "function",
    "name": "phase2",
    "start": 20549,
    "length": 95,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step3()",
    "start": 20592,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.setAddress(deprecated[i],address(0))",
    "start": 12031,
    "length": 72,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step4()",
    "start": 20605,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin))",
    "start": 12312,
    "length": 93,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin))",
    "start": 12481,
    "length": 139,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin))",
    "start": 12694,
    "length": 128,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step5()",
    "start": 20618,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp)))",
    "start": 13161,
    "length": 444,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig))))",
    "start": 13662,
    "length": 360,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl))",
    "start": 14072,
    "length": 196,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 14372,
    "length": 897,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,()))",
    "start": 15344,
    "length": 236,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl))",
    "start": 15641,
    "length": 184,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl))",
    "start": 15898,
    "length": 208,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl))",
    "start": 16165,
    "length": 180,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl))",
    "start": 16405,
    "length": 184,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 16687,
    "length": 886,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig))",
    "start": 17668,
    "length": 900,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion)",
    "start": 18665,
    "length": 1013,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false)",
    "start": 19775,
    "length": 547,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step5()",
    "start": 20618,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "e0107f7c5a23540264529b772723f49205e8967c3f4478fada885321945124bc",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l2OutputOracleProxy),address(config.implementationAddressConfig.l2OutputOracleImpl),abi.encodeCall(L2OutputOracle.initialize,(l2OutputOracleDynamicConfig.l2OutputOracleStartingBlockNumber,l2OutputOracleDynamicConfig.l2OutputOracleStartingTimestamp))) (src/deployment/SystemDictator.sol#395-405)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.optimismPortalProxy),address(config.implementationAddressConfig.optimismPortalImpl),abi.encodeCall(OptimismPortal.initialize,(SuperchainConfig(config.globalConfig.superchainConfig)))) (src/deployment/SystemDictator.sol#408-417)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1CrossDomainMessengerProxy),address(config.implementationAddressConfig.l1CrossDomainMessengerImpl)) (src/deployment/SystemDictator.sol#420-423)\n\t\t- L1CrossDomainMessenger(config.proxyAddressConfig.l1CrossDomainMessengerProxy).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#426-440)\n\t\t- config.globalConfig.proxyAdmin.upgradeAndCall(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.portalSenderImpl),abi.encodeCall(PortalSender.donate,())) (src/deployment/SystemDictator.sol#443-447)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1StandardBridgeProxy),address(config.implementationAddressConfig.l1StandardBridgeImpl)) (src/deployment/SystemDictator.sol#450-453)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.optimismMintableERC20FactoryProxy),address(config.implementationAddressConfig.optimismMintableERC20FactoryImpl)) (src/deployment/SystemDictator.sol#456-459)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.l1ERC721BridgeProxy),address(config.implementationAddressConfig.l1ERC721BridgeImpl)) (src/deployment/SystemDictator.sol#462-465)\n\t\t- config.globalConfig.proxyAdmin.upgrade(address(config.proxyAddressConfig.protocolVersionsProxy),address(config.implementationAddressConfig.protocolVersionsImpl)) (src/deployment/SystemDictator.sol#468-471)\n\t\t- L1StandardBridge(address(config.proxyAddressConfig.l1StandardBridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#474-488)\n\t\t- L1ERC721Bridge(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).initialize(SuperchainConfig(config.globalConfig.superchainConfig)) (src/deployment/SystemDictator.sol#491-505)\n\t\t- ProtocolVersions(config.proxyAddressConfig.protocolVersionsProxy).initialize(address(config.globalConfig.proxyAdmin),config.protocolVersionConfig.requiredProtocolVersion,config.protocolVersionConfig.recommendedProtocolVersion) (src/deployment/SystemDictator.sol#508-524)\n\t\t- SuperchainConfig(config.globalConfig.superchainConfig).initialize(optimismPortalDynamicConfig.portalGuardian,false) (src/deployment/SystemDictator.sol#527-539)\n\tState variables written after the call(s):\n\t- step5() (src/deployment/SystemDictator.sol#556)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "currentStep ++",
    "start": 5594,
    "length": 13,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "function",
    "name": "phase2",
    "start": 20549,
    "length": 95,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step3()",
    "start": 20592,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.setAddress(deprecated[i],address(0))",
    "start": 12031,
    "length": 72,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step4()",
    "start": 20605,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin))",
    "start": 12312,
    "length": 93,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin))",
    "start": 12481,
    "length": 139,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin))",
    "start": 12694,
    "length": 128,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "step4()",
    "start": 20605,
    "length": 7,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "fc1872599f16813678f66eb1a2891889bdb6efe966dbe1692b1c54092e743a6a",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "reentrancy-no-eth",
    "description": "Reentrancy in SystemDictator.phase2() (src/deployment/SystemDictator.sol#553-558):\n\tExternal calls:\n\t- step3() (src/deployment/SystemDictator.sol#554)\n\t\t- config.globalConfig.addressManager.setAddress(deprecated[i],address(0)) (src/deployment/SystemDictator.sol#365)\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- config.globalConfig.addressManager.transferOwnership(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#374)\n\t\t- L1ChugSplashProxy(address(config.proxyAddressConfig.l1StandardBridgeProxy)).setOwner(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#377-379)\n\t\t- Proxy(address(config.proxyAddressConfig.l1ERC721BridgeProxy)).changeAdmin(address(config.globalConfig.proxyAdmin)) (src/deployment/SystemDictator.sol#382-384)\n\tState variables written after the call(s):\n\t- step4() (src/deployment/SystemDictator.sol#555)\n\t\t- currentStep ++ (src/deployment/SystemDictator.sol#197)\n\tSystemDictator.currentStep (src/deployment/SystemDictator.sol#165) can be used in cross function reentrancies:\n\t- SystemDictator.currentStep (src/deployment/SystemDictator.sol#165)\n\t- SystemDictator.exit1() (src/deployment/SystemDictator.sol#591-602)\n\t- SystemDictator.finalize() (src/deployment/SystemDictator.sol#563-586)\n\t- SystemDictator.initialize(SystemDictator.DeployConfig) (src/deployment/SystemDictator.sol#252-257)\n\t- SystemDictator.step(uint8) (src/deployment/SystemDictator.sol#192-198)\n",
    "type": "node",
    "name": "currentStep ++",
    "start": 5594,
    "length": 13,
    "filename_relative": "src/deployment/SystemDictator.sol"
  },
  {
    "id": "138bfe0b87067edda58ea1bb24d88b46c26dd0da82a6818486cf28b4cb185d01",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "CrossDomainMessenger.relayMessage(uint256,address,address,uint256,uint256,bytes) (src/universal/CrossDomainMessenger.sol#211-306) uses tx.origin for authorization: tx.origin == Constants.ESTIMATION_ADDRESS (src/universal/CrossDomainMessenger.sol#279)\n",
    "type": "function",
    "name": "relayMessage",
    "start": 10427,
    "length": 4822,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "138bfe0b87067edda58ea1bb24d88b46c26dd0da82a6818486cf28b4cb185d01",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "CrossDomainMessenger.relayMessage(uint256,address,address,uint256,uint256,bytes) (src/universal/CrossDomainMessenger.sol#211-306) uses tx.origin for authorization: tx.origin == Constants.ESTIMATION_ADDRESS (src/universal/CrossDomainMessenger.sol#279)\n",
    "type": "node",
    "name": "tx.origin == Constants.ESTIMATION_ADDRESS",
    "start": 14024,
    "length": 41,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "37ae06d1257a210b94d7ebd3a411a5e657e4fe6e09bdcb5405f76bcf5b2e6496",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "CrossDomainMessenger.relayMessage(uint256,address,address,uint256,uint256,bytes) (src/universal/CrossDomainMessenger.sol#211-306) uses tx.origin for authorization: tx.origin == Constants.ESTIMATION_ADDRESS (src/universal/CrossDomainMessenger.sol#302)\n",
    "type": "function",
    "name": "relayMessage",
    "start": 10427,
    "length": 4822,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "37ae06d1257a210b94d7ebd3a411a5e657e4fe6e09bdcb5405f76bcf5b2e6496",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "CrossDomainMessenger.relayMessage(uint256,address,address,uint256,uint256,bytes) (src/universal/CrossDomainMessenger.sol#211-306) uses tx.origin for authorization: tx.origin == Constants.ESTIMATION_ADDRESS (src/universal/CrossDomainMessenger.sol#302)\n",
    "type": "node",
    "name": "tx.origin == Constants.ESTIMATION_ADDRESS",
    "start": 15102,
    "length": 41,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "6b52fad833e1120044d0d5364441efdf7e7d9f3988885eaeb83816ee433b43ea",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "OptimismPortal.finalizeWithdrawalTransaction(Types.WithdrawalTransaction) (src/L1/OptimismPortal.sol#264-347) uses tx.origin for authorization: success == false && tx.origin == Constants.ESTIMATION_ADDRESS (src/L1/OptimismPortal.sol#344)\n",
    "type": "function",
    "name": "finalizeWithdrawalTransaction",
    "start": 12831,
    "length": 4841,
    "filename_relative": "src/L1/OptimismPortal.sol"
  },
  {
    "id": "6b52fad833e1120044d0d5364441efdf7e7d9f3988885eaeb83816ee433b43ea",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "tx-origin",
    "description": "OptimismPortal.finalizeWithdrawalTransaction(Types.WithdrawalTransaction) (src/L1/OptimismPortal.sol#264-347) uses tx.origin for authorization: success == false && tx.origin == Constants.ESTIMATION_ADDRESS (src/L1/OptimismPortal.sol#344)\n",
    "type": "node",
    "name": "success == false && tx.origin == Constants.ESTIMATION_ADDRESS",
    "start": 17535,
    "length": 61,
    "filename_relative": "src/L1/OptimismPortal.sol"
  },
  {
    "id": "0369380fef18a61639eac6a12773df792e9969e7bb20eddde54ccf3a263a0987",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "uninitialized-local",
    "description": "FaultDisputeGame.move(uint256,Claim,bool).grandparentClock (src/dispute/FaultDisputeGame.sol#215) is a local variable never initialized\n",
    "type": "variable",
    "name": "grandparentClock",
    "start": 10602,
    "length": 22,
    "filename_relative": "src/dispute/FaultDisputeGame.sol"
  },
  {
    "id": "231751504104f2bfb59eb42b7d209c7667ca7b4c9ce8c110fc4c6a40e2bb0fc4",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "uninitialized-local",
    "description": "BobaHCHelper.SequentialRandom(bytes32,bytes32,uint256).responseNum (src/boba/BobaHCHelper.sol#79) is a local variable never initialized\n",
    "type": "variable",
    "name": "responseNum",
    "start": 2846,
    "length": 19,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "43f5c0ef7b76fbfc796d57cc9bd1f9cd99f8e71dfa8cad6da4541f5c5c5d4733",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "uninitialized-local",
    "description": "BobaHCHelper.SequentialRandom(bytes32,bytes32,uint256).serverHash (src/boba/BobaHCHelper.sol#78) is a local variable never initialized\n",
    "type": "variable",
    "name": "serverHash",
    "start": 2818,
    "length": 18,
    "filename_relative": "src/boba/BobaHCHelper.sol"
  },
  {
    "id": "b806faf2b63e910b939c5ff4b591b1109887080a010986f2af2c30787dbc2a10",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "uninitialized-local",
    "description": "OutputBisectionGame.findStartingAndDisputedOutputs(uint256).currentDepth (src/dispute/OutputBisectionGame.sol#609) is a local variable never initialized\n",
    "type": "variable",
    "name": "currentDepth",
    "start": 28890,
    "length": 20,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "c27cc53c209fdabd18ab2c8f2cddf2053516bcaaa39122d29702ac143d835a2f",
    "impact": "Medium",
    "confidence": "Medium",
    "check": "uninitialized-local",
    "description": "OutputBisectionGame.move(uint256,Claim,bool).grandparentClock (src/dispute/OutputBisectionGame.sol#232) is a local variable never initialized\n",
    "type": "variable",
    "name": "grandparentClock",
    "start": 11794,
    "length": 22,
    "filename_relative": "src/dispute/OutputBisectionGame.sol"
  },
  {
    "id": "9ad67b006fc175893dd26d35a020a52dd8524709d87cca61212ee0e147eb992b",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "CrossDomainMessenger.xDomainMsgSender (src/universal/CrossDomainMessenger.sol#129) is written in both\n\txDomainMsgSender = _sender (src/universal/CrossDomainMessenger.sol#286)\n\txDomainMsgSender = Constants.DEFAULT_L2_SENDER (src/universal/CrossDomainMessenger.sol#288)\n",
    "type": "variable",
    "name": "xDomainMsgSender",
    "start": 5784,
    "length": 33,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "9ad67b006fc175893dd26d35a020a52dd8524709d87cca61212ee0e147eb992b",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "CrossDomainMessenger.xDomainMsgSender (src/universal/CrossDomainMessenger.sol#129) is written in both\n\txDomainMsgSender = _sender (src/universal/CrossDomainMessenger.sol#286)\n\txDomainMsgSender = Constants.DEFAULT_L2_SENDER (src/universal/CrossDomainMessenger.sol#288)\n",
    "type": "node",
    "name": "xDomainMsgSender = _sender",
    "start": 14196,
    "length": 26,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "9ad67b006fc175893dd26d35a020a52dd8524709d87cca61212ee0e147eb992b",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "CrossDomainMessenger.xDomainMsgSender (src/universal/CrossDomainMessenger.sol#129) is written in both\n\txDomainMsgSender = _sender (src/universal/CrossDomainMessenger.sol#286)\n\txDomainMsgSender = Constants.DEFAULT_L2_SENDER (src/universal/CrossDomainMessenger.sol#288)\n",
    "type": "node",
    "name": "xDomainMsgSender = Constants.DEFAULT_L2_SENDER",
    "start": 14329,
    "length": 46,
    "filename_relative": "src/universal/CrossDomainMessenger.sol"
  },
  {
    "id": "aba76c5478a36b00ed8b66577c0cd1d3186109cf82c1767ce230c6fe72315c04",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "OptimismPortal.l2Sender (src/L1/OptimismPortal.sol#53) is written in both\n\tl2Sender = _tx.sender (src/L1/OptimismPortal.sol#323)\n\tl2Sender = Constants.DEFAULT_L2_SENDER (src/L1/OptimismPortal.sol#335)\n",
    "type": "variable",
    "name": "l2Sender",
    "start": 2603,
    "length": 23,
    "filename_relative": "src/L1/OptimismPortal.sol"
  },
  {
    "id": "aba76c5478a36b00ed8b66577c0cd1d3186109cf82c1767ce230c6fe72315c04",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "OptimismPortal.l2Sender (src/L1/OptimismPortal.sol#53) is written in both\n\tl2Sender = _tx.sender (src/L1/OptimismPortal.sol#323)\n\tl2Sender = Constants.DEFAULT_L2_SENDER (src/L1/OptimismPortal.sol#335)\n",
    "type": "node",
    "name": "l2Sender = _tx.sender",
    "start": 16236,
    "length": 21,
    "filename_relative": "src/L1/OptimismPortal.sol"
  },
  {
    "id": "aba76c5478a36b00ed8b66577c0cd1d3186109cf82c1767ce230c6fe72315c04",
    "impact": "Medium",
    "confidence": "High",
    "check": "write-after-write",
    "description": "OptimismPortal.l2Sender (src/L1/OptimismPortal.sol#53) is written in both\n\tl2Sender = _tx.sender (src/L1/OptimismPortal.sol#323)\n\tl2Sender = Constants.DEFAULT_L2_SENDER (src/L1/OptimismPortal.sol#335)\n",
    "type": "node",
    "name": "l2Sender = Constants.DEFAULT_L2_SENDER",
    "start": 17030,
    "length": 38,
    "filename_relative": "src/L1/OptimismPortal.sol"
  }
]

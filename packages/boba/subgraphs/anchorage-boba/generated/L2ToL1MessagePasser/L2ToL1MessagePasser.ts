// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MessagePassed extends ethereum.Event {
  get params(): MessagePassed__Params {
    return new MessagePassed__Params(this);
  }
}

export class MessagePassed__Params {
  _event: MessagePassed;

  constructor(event: MessagePassed) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get withdrawalHash(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class WithdrawerBalanceBurnt extends ethereum.Event {
  get params(): WithdrawerBalanceBurnt__Params {
    return new WithdrawerBalanceBurnt__Params(this);
  }
}

export class WithdrawerBalanceBurnt__Params {
  _event: WithdrawerBalanceBurnt;

  constructor(event: WithdrawerBalanceBurnt) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class L2ToL1MessagePasser extends ethereum.SmartContract {
  static bind(address: Address): L2ToL1MessagePasser {
    return new L2ToL1MessagePasser("L2ToL1MessagePasser", address);
  }

  MESSAGE_VERSION(): i32 {
    let result = super.call(
      "MESSAGE_VERSION",
      "MESSAGE_VERSION():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_MESSAGE_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MESSAGE_VERSION",
      "MESSAGE_VERSION():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  messageNonce(): BigInt {
    let result = super.call("messageNonce", "messageNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_messageNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("messageNonce", "messageNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sentMessages(param0: Bytes): boolean {
    let result = super.call("sentMessages", "sentMessages(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_sentMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("sentMessages", "sentMessages(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class InitiateWithdrawalCall extends ethereum.Call {
  get inputs(): InitiateWithdrawalCall__Inputs {
    return new InitiateWithdrawalCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawalCall__Outputs {
    return new InitiateWithdrawalCall__Outputs(this);
  }
}

export class InitiateWithdrawalCall__Inputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class InitiateWithdrawalCall__Outputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }
}

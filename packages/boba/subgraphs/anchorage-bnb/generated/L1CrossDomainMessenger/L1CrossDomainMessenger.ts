// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FailedRelayedMessage extends ethereum.Event {
  get params(): FailedRelayedMessage__Params {
    return new FailedRelayedMessage__Params(this);
  }
}

export class FailedRelayedMessage__Params {
  _event: FailedRelayedMessage;

  constructor(event: FailedRelayedMessage) {
    this._event = event;
  }

  get msgHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RelayedMessage extends ethereum.Event {
  get params(): RelayedMessage__Params {
    return new RelayedMessage__Params(this);
  }
}

export class RelayedMessage__Params {
  _event: RelayedMessage;

  constructor(event: RelayedMessage) {
    this._event = event;
  }

  get msgHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SentMessage extends ethereum.Event {
  get params(): SentMessage__Params {
    return new SentMessage__Params(this);
  }
}

export class SentMessage__Params {
  _event: SentMessage;

  constructor(event: SentMessage) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get message(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get messageNonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SentMessageExtension1 extends ethereum.Event {
  get params(): SentMessageExtension1__Params {
    return new SentMessageExtension1__Params(this);
  }
}

export class SentMessageExtension1__Params {
  _event: SentMessageExtension1;

  constructor(event: SentMessageExtension1) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class L1CrossDomainMessenger extends ethereum.SmartContract {
  static bind(address: Address): L1CrossDomainMessenger {
    return new L1CrossDomainMessenger("L1CrossDomainMessenger", address);
  }

  MESSAGE_VERSION(): i32 {
    let result = super.call(
      "MESSAGE_VERSION",
      "MESSAGE_VERSION():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_MESSAGE_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MESSAGE_VERSION",
      "MESSAGE_VERSION():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MIN_GAS_CALLDATA_OVERHEAD(): BigInt {
    let result = super.call(
      "MIN_GAS_CALLDATA_OVERHEAD",
      "MIN_GAS_CALLDATA_OVERHEAD():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_GAS_CALLDATA_OVERHEAD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_GAS_CALLDATA_OVERHEAD",
      "MIN_GAS_CALLDATA_OVERHEAD():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(): BigInt {
    let result = super.call(
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
      "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(): BigInt {
    let result = super.call(
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
      "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OTHER_MESSENGER(): Address {
    let result = super.call(
      "OTHER_MESSENGER",
      "OTHER_MESSENGER():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_OTHER_MESSENGER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OTHER_MESSENGER",
      "OTHER_MESSENGER():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PORTAL(): Address {
    let result = super.call("PORTAL", "PORTAL():(address)", []);

    return result[0].toAddress();
  }

  try_PORTAL(): ethereum.CallResult<Address> {
    let result = super.tryCall("PORTAL", "PORTAL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  RELAY_CALL_OVERHEAD(): BigInt {
    let result = super.call(
      "RELAY_CALL_OVERHEAD",
      "RELAY_CALL_OVERHEAD():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_RELAY_CALL_OVERHEAD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RELAY_CALL_OVERHEAD",
      "RELAY_CALL_OVERHEAD():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RELAY_CONSTANT_OVERHEAD(): BigInt {
    let result = super.call(
      "RELAY_CONSTANT_OVERHEAD",
      "RELAY_CONSTANT_OVERHEAD():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_RELAY_CONSTANT_OVERHEAD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RELAY_CONSTANT_OVERHEAD",
      "RELAY_CONSTANT_OVERHEAD():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RELAY_GAS_CHECK_BUFFER(): BigInt {
    let result = super.call(
      "RELAY_GAS_CHECK_BUFFER",
      "RELAY_GAS_CHECK_BUFFER():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_RELAY_GAS_CHECK_BUFFER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RELAY_GAS_CHECK_BUFFER",
      "RELAY_GAS_CHECK_BUFFER():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RELAY_RESERVED_GAS(): BigInt {
    let result = super.call(
      "RELAY_RESERVED_GAS",
      "RELAY_RESERVED_GAS():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_RELAY_RESERVED_GAS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RELAY_RESERVED_GAS",
      "RELAY_RESERVED_GAS():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseGas(_message: Bytes, _minGasLimit: BigInt): BigInt {
    let result = super.call("baseGas", "baseGas(bytes,uint32):(uint64)", [
      ethereum.Value.fromBytes(_message),
      ethereum.Value.fromUnsignedBigInt(_minGasLimit),
    ]);

    return result[0].toBigInt();
  }

  try_baseGas(
    _message: Bytes,
    _minGasLimit: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseGas", "baseGas(bytes,uint32):(uint64)", [
      ethereum.Value.fromBytes(_message),
      ethereum.Value.fromUnsignedBigInt(_minGasLimit),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  failedMessages(param0: Bytes): boolean {
    let result = super.call(
      "failedMessages",
      "failedMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_failedMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "failedMessages",
      "failedMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  messageNonce(): BigInt {
    let result = super.call("messageNonce", "messageNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_messageNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("messageNonce", "messageNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  otherMessenger(): Address {
    let result = super.call("otherMessenger", "otherMessenger():(address)", []);

    return result[0].toAddress();
  }

  try_otherMessenger(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "otherMessenger",
      "otherMessenger():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  portal(): Address {
    let result = super.call("portal", "portal():(address)", []);

    return result[0].toAddress();
  }

  try_portal(): ethereum.CallResult<Address> {
    let result = super.tryCall("portal", "portal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  successfulMessages(param0: Bytes): boolean {
    let result = super.call(
      "successfulMessages",
      "successfulMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_successfulMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "successfulMessages",
      "successfulMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  superchainConfig(): Address {
    let result = super.call(
      "superchainConfig",
      "superchainConfig():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_superchainConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "superchainConfig",
      "superchainConfig():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  xDomainMessageSender(): Address {
    let result = super.call(
      "xDomainMessageSender",
      "xDomainMessageSender():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_xDomainMessageSender(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xDomainMessageSender",
      "xDomainMessageSender():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _superchainConfig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _portal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RelayMessageCall extends ethereum.Call {
  get inputs(): RelayMessageCall__Inputs {
    return new RelayMessageCall__Inputs(this);
  }

  get outputs(): RelayMessageCall__Outputs {
    return new RelayMessageCall__Outputs(this);
  }
}

export class RelayMessageCall__Inputs {
  _call: RelayMessageCall;

  constructor(call: RelayMessageCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minGasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _message(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class RelayMessageCall__Outputs {
  _call: RelayMessageCall;

  constructor(call: RelayMessageCall) {
    this._call = call;
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _message(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _minGasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }
}

// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// KmsManager is an autogenerated mock type for the KmsManager type
type KmsManager struct {
	mock.Mock
}

// GetAddr provides a mock function with given fields:
func (_m *KmsManager) GetAddr() (common.Address, error) {
	ret := _m.Called()

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: chainID, tx
func (_m *KmsManager) Sign(chainID *big.Int, tx *types.Transaction) (*types.Transaction, error) {
	ret := _m.Called(chainID, tx)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int, *types.Transaction) (*types.Transaction, error)); ok {
		return rf(chainID, tx)
	}
	if rf, ok := ret.Get(0).(func(*big.Int, *types.Transaction) *types.Transaction); ok {
		r0 = rf(chainID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int, *types.Transaction) error); ok {
		r1 = rf(chainID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKmsManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewKmsManager creates a new instance of KmsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKmsManager(t mockConstructorTestingTNewKmsManager) *KmsManager {
	mock := &KmsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
